@{
    ViewData["Title"] = "Home Page";
    Layout = "_MainLayout";
}

<style>

    .counter {
        background-color: #ffffff;
        padding: 20px 0;
        border-radius: 5px;
    }

    .count-title {
        font-size: 40px;
        font-weight: normal;
        margin-top: 10px;
        margin-bottom: 0;
        text-align: center;
    }

    .count-text {
        font-size: 20px;
        font-weight: normal;
        margin-top: 10px;
        margin-bottom: 0;
        text-align: center;
    }

    .fa-2x {
        margin: 0 auto;
        float: none;
        display: table;
        color: #4ad1e5;
        font-size: 40px;
    }
    .a:hover
    {
        background-color:aqua;
    }
    
</style>
<div class="ml-0 mr-0">
    <img class="mySlides w3-animate-fading" src="~/images/a.jpg" style="width:100%;height:190px;">



</div>

<div class="text-center" >
    <h3 class="display-4 m-5" >  الكشاف العربي </h3>


    <div class="row text-center ml-0">
        <div class="col-md-3 mb-2">
            <a class="nav-link a" asp-controller="Search" asp-action="SearchAuthers">
                <div class="counter">
                    <i class="fas fa-user-edit fa-2x" style="color:blueviolet"></i>
                    <h2 class="timer count-title count-number" data-to="@ViewBag.authors" data-speed="6000"></h2>
                    <p class="count-text ">اجمالي عدد المؤلفين</p>
                </div>
            </a>
        </div>
        <div class="col-md-3 mb-2">
            <a class="nav-link a" asp-controller="Search" asp-action="SearchArticle">
                <div class="counter">
                    <i class="fas fa-scroll fa-2x" style="color:burlywood"></i>
                    <h2 class="timer count-title count-number" data-to="@ViewBag.articles" data-speed="6000"></h2>
                    <p class="count-text ">اجمالي عدد المقالات</p>
                </div>
             </a>
        </div>
        <div class="col-md-3 mb-2">
            <a class="nav-link a" asp-controller="Search" asp-action="Searchmagazine">
                <div class="counter">
                    <i class="fas fa-book fa-2x" style="color:greenyellow;"></i>
                    <h2 class="timer count-title count-number" data-to="@ViewBag.magazines" data-speed="6000"></h2>
                    <p class="count-text ">اجمالي عدد المجلات</p>
                </div>
             </a>
        </div>
        <div class="col-md-3 mb-2">
            <a class="nav-link a" asp-controller="Institutionsforuser" asp-action="Index">
                <div class="counter">
                    <i class="fas fa-university fa-2x" style="color:darkblue"></i>
                    <h2 class="timer count-title count-number" data-to="@ViewBag.institutions" data-speed="6000"></h2>
                    <p class="count-text ">اجمالي عدد المؤسسات التعليمية</p>
                </div>
             </a>
        </div>
    </div>
    <marquee direction="right" class="m-5">
        <h3>
           تابع معنا اخر اخبار الباحثين والمقالات والاستشهادات
        </h3>
    </marquee>
</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        (function ($) {
            $.fn.countTo = function (options) {
                options = options || {};

                return $(this).each(function () {
                    // set options for current element
                    var settings = $.extend({}, $.fn.countTo.defaults, {
                        from: $(this).data('from'),
                        to: $(this).data('to'),
                        speed: $(this).data('speed'),
                        refreshInterval: $(this).data('refresh-interval'),
                        decimals: $(this).data('decimals')
                    }, options);

                    // how many times to update the value, and how much to increment the value on each update
                    var loops = Math.ceil(settings.speed / settings.refreshInterval),
                        increment = (settings.to - settings.from) / loops;

                    // references & variables that will change with each update
                    var self = this,
                        $self = $(this),
                        loopCount = 0,
                        value = settings.from,
                        data = $self.data('countTo') || {};

                    $self.data('countTo', data);

                    // if an existing interval can be found, clear it first
                    if (data.interval) {
                        clearInterval(data.interval);
                    }
                    data.interval = setInterval(updateTimer, settings.refreshInterval);

                    // initialize the element with the starting value
                    render(value);

                    function updateTimer() {
                        value += increment;
                        loopCount++;

                        render(value);

                        if (typeof (settings.onUpdate) == 'function') {
                            settings.onUpdate.call(self, value);
                        }

                        if (loopCount >= loops) {
                            // remove the interval
                            $self.removeData('countTo');
                            clearInterval(data.interval);
                            value = settings.to;

                            if (typeof (settings.onComplete) == 'function') {
                                settings.onComplete.call(self, value);
                            }
                        }
                    }

                    function render(value) {
                        var formattedValue = settings.formatter.call(self, value, settings);
                        $self.html(formattedValue);
                    }
                });
            };

            $.fn.countTo.defaults = {
                from: 0,               // the number the element should start at
                to: 0,                 // the number the element should end at
                speed: 1000,           // how long it should take to count between the target numbers
                refreshInterval: 100,  // how often the element should be updated
                decimals: 0,           // the number of decimal places to show
                formatter: formatter,  // handler for formatting the value before rendering
                onUpdate: null,        // callback method for every time the element is updated
                onComplete: null       // callback method for when the element finishes updating
            };

            function formatter(value, settings) {
                return value.toFixed(settings.decimals);
            }
        }(jQuery));

        jQuery(function ($) {
            // custom formatting example
            $('.count-number').data('countToOptions', {
                formatter: function (value, options) {
                    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
                }
            });

            // start all the timers
            $('.timer').each(count);

            function count(options) {
                var $this = $(this);
                options = $.extend({}, options || {}, $this.data('countToOptions') || {});
                $this.countTo(options);
            }
        });

    </script>
   
}
