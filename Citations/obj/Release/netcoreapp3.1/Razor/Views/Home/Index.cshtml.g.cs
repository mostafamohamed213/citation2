#pragma checksum "C:\Users\MostafaAli\Pictures\citationuser\citationdesign\Citation2\Citations\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cc83539b85f8bef6446338045f4206c17ea604cd"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\MostafaAli\Pictures\citationuser\citationdesign\Citation2\Citations\Views\_ViewImports.cshtml"
using Citations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\MostafaAli\Pictures\citationuser\citationdesign\Citation2\Citations\Views\_ViewImports.cshtml"
using Citations.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\MostafaAli\Pictures\citationuser\citationdesign\Citation2\Citations\Views\_ViewImports.cshtml"
using Citations.Controllers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\MostafaAli\Pictures\citationuser\citationdesign\Citation2\Citations\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cc83539b85f8bef6446338045f4206c17ea604cd", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"37f3a45128a0567054a27ce92f916fdb16fa5521", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\MostafaAli\Pictures\citationuser\citationdesign\Citation2\Citations\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<style>

    .counter {
        background-color: #22c646;
        padding: 20px 0;
        border-radius: 5px;
        margin-top:100px;
    }

    .count-title {
        font-size: 40px;
        font-weight: normal;
        margin-top: 10px;
        margin-bottom: 0;
        text-align: center;
    }

    .count-text {
        font-size: 13px;
        font-weight: normal;
        margin-top: 10px;
        margin-bottom: 0;
        text-align: center;
    }

    .fa-2x {
        margin: 0 auto;
        float: none;
        display: table;
        color: #4ad1e5;
        font-size: 40px;
    }
</style>

<div class=""row text-center"">
    <div class=""col-md-3 mb-2"">
        <div class=""counter"">
            <i class=""fas fa-user-edit fa-2x"" style=""color:blueviolet""></i>
            <h2 class=""timer count-title count-number"" data-to=""");
#nullable restore
#line 43 "C:\Users\MostafaAli\Pictures\citationuser\citationdesign\Citation2\Citations\Views\Home\Index.cshtml"
                                                           Write(ViewBag.authors);

#line default
#line hidden
#nullable disable
            WriteLiteral(@""" data-speed=""6000""></h2>
            <h6 class="" "">اجمالي عدد المؤلفين</h6>
        </div>
    </div>
    <div class=""col-md-3 mb-2"">
        <div class=""counter"">
            <i class=""fas fa-scroll fa-2x"" style=""color:burlywood""></i>
            <h2 class=""timer count-title count-number"" data-to=""");
#nullable restore
#line 50 "C:\Users\MostafaAli\Pictures\citationuser\citationdesign\Citation2\Citations\Views\Home\Index.cshtml"
                                                           Write(ViewBag.articles);

#line default
#line hidden
#nullable disable
            WriteLiteral(@""" data-speed=""6000""></h2>
            <h6 class="" "">اجمالي عدد المقالات</h6>
        </div>
    </div>
    <div class=""col-md-3 mb-2"">
        <div class=""counter"">
            <i class=""fas fa-book fa-2x"" style=""color:greenyellow;""></i>
            <h2 class=""timer count-title count-number"" data-to=""");
#nullable restore
#line 57 "C:\Users\MostafaAli\Pictures\citationuser\citationdesign\Citation2\Citations\Views\Home\Index.cshtml"
                                                           Write(ViewBag.magazines);

#line default
#line hidden
#nullable disable
            WriteLiteral("\" data-speed=\"6000\"></h2>\r\n            <h6");
            BeginWriteAttribute("class", " class=\"", 1638, "\"", 1646, 0);
            EndWriteAttribute();
            WriteLiteral(@">اجمالي عدد المجلات</h6>
        </div>
    </div>
    <div class=""col-md-3 mb-2"">
        <div class=""counter"">
            <i class=""fas fa-university fa-2x"" style=""color:darkblue""></i>
            <h2 class=""timer count-title count-number"" data-to=""");
#nullable restore
#line 64 "C:\Users\MostafaAli\Pictures\citationuser\citationdesign\Citation2\Citations\Views\Home\Index.cshtml"
                                                           Write(ViewBag.institutions);

#line default
#line hidden
#nullable disable
            WriteLiteral("\" data-speed=\"6000\"></h2>\r\n            <h6 class=\" \">اجمالي عدد المؤسسات التعليمية</h6>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n");
#nullable restore
#line 71 "C:\Users\MostafaAli\Pictures\citationuser\citationdesign\Citation2\Citations\Views\Home\Index.cshtml"
      await Html.RenderPartialAsync("_ValidationScriptsPartial");

#line default
#line hidden
#nullable disable
                WriteLiteral(@"    <script>
        (function ($) {
            $.fn.countTo = function (options) {
                options = options || {};

                return $(this).each(function () {
                    // set options for current element
                    var settings = $.extend({}, $.fn.countTo.defaults, {
                        from: $(this).data('from'),
                        to: $(this).data('to'),
                        speed: $(this).data('speed'),
                        refreshInterval: $(this).data('refresh-interval'),
                        decimals: $(this).data('decimals')
                    }, options);

                    // how many times to update the value, and how much to increment the value on each update
                    var loops = Math.ceil(settings.speed / settings.refreshInterval),
                        increment = (settings.to - settings.from) / loops;

                    // references & variables that will change with each update
                    var s");
                WriteLiteral(@"elf = this,
                        $self = $(this),
                        loopCount = 0,
                        value = settings.from,
                        data = $self.data('countTo') || {};

                    $self.data('countTo', data);

                    // if an existing interval can be found, clear it first
                    if (data.interval) {
                        clearInterval(data.interval);
                    }
                    data.interval = setInterval(updateTimer, settings.refreshInterval);

                    // initialize the element with the starting value
                    render(value);

                    function updateTimer() {
                        value += increment;
                        loopCount++;

                        render(value);

                        if (typeof (settings.onUpdate) == 'function') {
                            settings.onUpdate.call(self, value);
                        }

                        if (");
                WriteLiteral(@"loopCount >= loops) {
                            // remove the interval
                            $self.removeData('countTo');
                            clearInterval(data.interval);
                            value = settings.to;

                            if (typeof (settings.onComplete) == 'function') {
                                settings.onComplete.call(self, value);
                            }
                        }
                    }

                    function render(value) {
                        var formattedValue = settings.formatter.call(self, value, settings);
                        $self.html(formattedValue);
                    }
                });
            };

            $.fn.countTo.defaults = {
                from: 0,               // the number the element should start at
                to: 0,                 // the number the element should end at
                speed: 1000,           // how long it should take to count between the tar");
                WriteLiteral(@"get numbers
                refreshInterval: 100,  // how often the element should be updated
                decimals: 0,           // the number of decimal places to show
                formatter: formatter,  // handler for formatting the value before rendering
                onUpdate: null,        // callback method for every time the element is updated
                onComplete: null       // callback method for when the element finishes updating
            };

            function formatter(value, settings) {
                return value.toFixed(settings.decimals);
            }
        }(jQuery));

        jQuery(function ($) {
            // custom formatting example
            $('.count-number').data('countToOptions', {
                formatter: function (value, options) {
                    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
                }
            });

            // start all the timers
            $('.timer').each(coun");
                WriteLiteral(@"t);

            function count(options) {
                var $this = $(this);
                options = $.extend({}, options || {}, $this.data('countToOptions') || {});
                $this.countTo(options);
            }
        });

    </script>
  
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
