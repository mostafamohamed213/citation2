// <auto-generated />
using System;
using Citations.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Citations.Migrations
{
    [DbContext(typeof(CitationContext))]
    [Migration("20210228182148_Extend_IdentityUser")]
    partial class Extend_IdentityUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("Citations.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Citations.Models.Article", b =>
                {
                    b.Property<int>("Articleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("articleid")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int>("ArticleIssue")
                        .HasColumnType("integer")
                        .HasColumnName("article_issue");

                    b.Property<string>("Articletittle")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("articletittle");

                    b.Property<string>("ArticletittleEn")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("articletittle_en");

                    b.Property<string>("BriefQuote")
                        .HasColumnType("character varying")
                        .HasColumnName("brief_quote");

                    b.Property<string>("BriefQuoteEn")
                        .HasColumnType("character varying")
                        .HasColumnName("brief_quote_en");

                    b.Property<int?>("NumberOfCitations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("number_of_citations")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("NumberOfReferences")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("number_of_references")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Page")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("page");

                    b.Property<string>("ScannedArticlePdf")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("scanned_article_pdf");

                    b.HasKey("Articleid");

                    b.HasIndex("ArticleIssue");

                    b.HasIndex(new[] { "ArticletittleEn" }, "articles_articletittle_en_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Articletittle" }, "articles_articletittle_key")
                        .IsUnique();

                    b.ToTable("articles", "core");
                });

            modelBuilder.Entity("Citations.Models.ArticleAuthore", b =>
                {
                    b.Property<int>("Authorid")
                        .HasColumnType("integer")
                        .HasColumnName("authorid");

                    b.Property<int>("Articleid")
                        .HasColumnType("integer")
                        .HasColumnName("articleid");

                    b.Property<bool>("MainAuthor")
                        .HasColumnType("boolean")
                        .HasColumnName("main_author");

                    b.HasKey("Authorid", "Articleid")
                        .HasName("article_authores_pkey");

                    b.HasIndex("Articleid");

                    b.ToTable("article_authores", "core");
                });

            modelBuilder.Entity("Citations.Models.ArticleReference", b =>
                {
                    b.Property<int>("ArticleReferencesid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("article_referencesid")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Articleid")
                        .HasColumnType("integer")
                        .HasColumnName("articleid");

                    b.Property<int?>("Articlerefid")
                        .HasColumnType("integer")
                        .HasColumnName("articlerefid");

                    b.Property<int?>("Bookid")
                        .HasColumnType("integer")
                        .HasColumnName("bookid");

                    b.Property<int?>("Conferenceid")
                        .HasColumnType("integer")
                        .HasColumnName("conferenceid");

                    b.Property<int?>("TypeSourceid")
                        .HasColumnType("integer")
                        .HasColumnName("type_sourceid");

                    b.HasKey("ArticleReferencesid")
                        .HasName("article_references_pkey");

                    b.HasIndex("Articleid");

                    b.HasIndex("Articlerefid");

                    b.HasIndex("Bookid");

                    b.HasIndex("Conferenceid");

                    b.HasIndex("TypeSourceid");

                    b.ToTable("article_references", "core");
                });

            modelBuilder.Entity("Citations.Models.ArticlesKeyword", b =>
                {
                    b.Property<int>("Articleid")
                        .HasColumnType("integer")
                        .HasColumnName("articleid");

                    b.Property<int>("KeyWordid")
                        .HasColumnType("integer")
                        .HasColumnName("key_wordid");

                    b.HasKey("Articleid", "KeyWordid")
                        .HasName("articles_keywords_pkey");

                    b.HasIndex("KeyWordid");

                    b.ToTable("articles_keywords", "core");
                });

            modelBuilder.Entity("Citations.Models.Author", b =>
                {
                    b.Property<int>("Authorid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("authorid")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("AuthorBio")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("author_bio");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int>("PointerH")
                        .HasColumnType("integer")
                        .HasColumnName("pointer_h");

                    b.Property<string>("ScannedAuthorimage")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("scanned_authorimage");

                    b.HasKey("Authorid");

                    b.ToTable("authors", "core");
                });

            modelBuilder.Entity("Citations.Models.AuthorResearchField", b =>
                {
                    b.Property<int>("Authorid")
                        .HasColumnType("integer")
                        .HasColumnName("authorid");

                    b.Property<int>("Fieldid")
                        .HasColumnType("integer")
                        .HasColumnName("fieldid");

                    b.HasKey("Authorid", "Fieldid")
                        .HasName("author_research_fields_pkey");

                    b.HasIndex("Fieldid");

                    b.ToTable("author_research_fields", "core");
                });

            modelBuilder.Entity("Citations.Models.AuthorsPositionInstitution", b =>
                {
                    b.Property<int>("AuthorsPositionInstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("authors_position_institution_id")
                        .HasDefaultValueSql("nextval('core.authors_position_institution_authors_position_institution_i_seq'::regclass)");

                    b.Property<int>("Authorid")
                        .HasColumnType("integer")
                        .HasColumnName("authorid");

                    b.Property<int>("FacultyInstitutionDepartmentid")
                        .HasColumnType("integer")
                        .HasColumnName("faculty_institution_departmentid");

                    b.Property<bool>("MainIntitute")
                        .HasColumnType("boolean")
                        .HasColumnName("main_intitute");

                    b.Property<int>("PositionJobid")
                        .HasColumnType("integer")
                        .HasColumnName("position_jobid");

                    b.HasKey("AuthorsPositionInstitutionId");

                    b.HasIndex("Authorid");

                    b.HasIndex("FacultyInstitutionDepartmentid");

                    b.HasIndex("PositionJobid");

                    b.ToTable("authors_position_institution", "core");
                });

            modelBuilder.Entity("Citations.Models.Book", b =>
                {
                    b.Property<int>("Bookid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bookid")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Booktittle")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("booktittle");

                    b.Property<int?>("Country")
                        .HasColumnType("integer")
                        .HasColumnName("country");

                    b.Property<string>("Page")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("page");

                    b.Property<int?>("Publisherid")
                        .HasColumnType("integer")
                        .HasColumnName("publisherid");

                    b.Property<string>("Year")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("year");

                    b.HasKey("Bookid");

                    b.HasIndex("Country");

                    b.HasIndex("Publisherid");

                    b.HasIndex(new[] { "Booktittle" }, "books_booktittle_key")
                        .IsUnique();

                    b.ToTable("books", "core");
                });

            modelBuilder.Entity("Citations.Models.BookAuthore", b =>
                {
                    b.Property<int>("Authorid")
                        .HasColumnType("integer")
                        .HasColumnName("authorid");

                    b.Property<int>("Bookid")
                        .HasColumnType("integer")
                        .HasColumnName("bookid");

                    b.Property<bool>("MainAuthor")
                        .HasColumnType("boolean")
                        .HasColumnName("main_author");

                    b.HasKey("Authorid", "Bookid")
                        .HasName("book_authores_pkey");

                    b.HasIndex("Bookid");

                    b.ToTable("book_authores", "core");
                });

            modelBuilder.Entity("Citations.Models.ConferenceProceeding", b =>
                {
                    b.Property<int>("Conferenceid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("conferenceid")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("ConferencePublicationName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("conference_publication_name");

                    b.Property<string>("Conferencetittle")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("conferencetittle");

                    b.Property<int?>("Country")
                        .HasColumnType("integer")
                        .HasColumnName("country");

                    b.Property<string>("Page")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("page");

                    b.Property<int?>("Publisherid")
                        .HasColumnType("integer")
                        .HasColumnName("publisherid");

                    b.Property<string>("Year")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("year");

                    b.HasKey("Conferenceid")
                        .HasName("conference_proceedings_pkey");

                    b.HasIndex("Country");

                    b.HasIndex("Publisherid");

                    b.HasIndex(new[] { "Conferencetittle" }, "conference_proceedings_conferencetittle_key")
                        .IsUnique();

                    b.ToTable("conference_proceedings", "core");
                });

            modelBuilder.Entity("Citations.Models.ConferenceProceedingsAuthor", b =>
                {
                    b.Property<int>("Authorid")
                        .HasColumnType("integer")
                        .HasColumnName("authorid");

                    b.Property<int>("Conferenceid")
                        .HasColumnType("integer")
                        .HasColumnName("conferenceid");

                    b.Property<bool>("MainAuthor")
                        .HasColumnType("boolean")
                        .HasColumnName("main_author");

                    b.HasKey("Authorid", "Conferenceid")
                        .HasName("conference_proceedings_authors_pkey");

                    b.HasIndex("Conferenceid");

                    b.ToTable("conference_proceedings_authors", "core");
                });

            modelBuilder.Entity("Citations.Models.Country", b =>
                {
                    b.Property<int>("Countryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("countryid")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Countryid");

                    b.HasIndex(new[] { "Name" }, "country_name_key")
                        .IsUnique();

                    b.ToTable("country", "core");
                });

            modelBuilder.Entity("Citations.Models.Department", b =>
                {
                    b.Property<int>("Departmentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("departmentid")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Departmentid");

                    b.ToTable("department", "core");
                });

            modelBuilder.Entity("Citations.Models.Faculty", b =>
                {
                    b.Property<int>("Facultyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("facultyid")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Facultyid");

                    b.ToTable("faculty", "core");
                });

            modelBuilder.Entity("Citations.Models.FacultyInstitution", b =>
                {
                    b.Property<int>("FacultyInstitutionid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("faculty_institutionid")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Facultyid")
                        .HasColumnType("integer")
                        .HasColumnName("facultyid");

                    b.Property<int>("Institutionid")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.HasKey("FacultyInstitutionid");

                    b.HasIndex("Facultyid");

                    b.HasIndex("Institutionid");

                    b.ToTable("faculty_institution", "core");
                });

            modelBuilder.Entity("Citations.Models.FacultyInstitutionDepartment", b =>
                {
                    b.Property<int>("FacultyInstitutionDepartmentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("faculty_institution_departmentid")
                        .HasDefaultValueSql("nextval('core.faculty_institution_departmen_faculty_institution_departmen_seq'::regclass)");

                    b.Property<int>("Departmentid")
                        .HasColumnType("integer")
                        .HasColumnName("departmentid");

                    b.Property<int>("FacultyInstitutionid")
                        .HasColumnType("integer")
                        .HasColumnName("faculty_institutionid");

                    b.HasKey("FacultyInstitutionDepartmentid");

                    b.HasIndex("Departmentid");

                    b.HasIndex("FacultyInstitutionid");

                    b.ToTable("faculty_institution_department", "core");
                });

            modelBuilder.Entity("Citations.Models.Institution", b =>
                {
                    b.Property<int>("Institutionid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("institutionid")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int>("Country")
                        .HasColumnType("integer")
                        .HasColumnName("country");

                    b.Property<int>("ImpactFactor")
                        .HasColumnType("integer")
                        .HasColumnName("impact_factor");

                    b.Property<bool?>("IsPublisher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_publisher")
                        .HasDefaultValueSql("false");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int>("NumberOfCitations")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_citations");

                    b.Property<int>("PointerH")
                        .HasColumnType("integer")
                        .HasColumnName("pointer_h");

                    b.Property<string>("ScannedCoverImage")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("scanned_cover_image");

                    b.Property<string>("ScannedLogoImage")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("scanned_logo_image");

                    b.Property<int>("TypeOfInstitution")
                        .HasColumnType("integer")
                        .HasColumnName("type_of_institution");

                    b.HasKey("Institutionid");

                    b.HasIndex("Country");

                    b.HasIndex("TypeOfInstitution");

                    b.HasIndex(new[] { "Name" }, "institution_name_key")
                        .IsUnique();

                    b.ToTable("institution", "core");
                });

            modelBuilder.Entity("Citations.Models.IssueOfIssue", b =>
                {
                    b.Property<int>("IssueOfIssueid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("issue_of_issueid")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateOfPublication")
                        .HasColumnType("date")
                        .HasColumnName("date_of_publication");

                    b.Property<string>("IssuenumberOfIssue")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("issuenumber_of_issue");

                    b.Property<int>("MagazineIssueId")
                        .HasColumnType("integer")
                        .HasColumnName("magazine_issue_id");

                    b.HasKey("IssueOfIssueid");

                    b.HasIndex("MagazineIssueId");

                    b.ToTable("issue_of_issue", "core");
                });

            modelBuilder.Entity("Citations.Models.KeyWord", b =>
                {
                    b.Property<int>("KeyWordid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("key_wordid")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("KeyWord1")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("key_word");

                    b.Property<string>("KeyWordEn")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("key_word_en");

                    b.HasKey("KeyWordid");

                    b.ToTable("key_words", "core");
                });

            modelBuilder.Entity("Citations.Models.Magazine", b =>
                {
                    b.Property<int>("Magazineid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("magazineid")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int>("AppropriateValue")
                        .HasColumnType("integer")
                        .HasColumnName("appropriate_value");

                    b.Property<int>("ImmediateCoefficient")
                        .HasColumnType("integer")
                        .HasColumnName("immediate_coefficient");

                    b.Property<int>("ImpactFactor")
                        .HasColumnType("integer")
                        .HasColumnName("impact_factor");

                    b.Property<int>("Institutionid")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("isbn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int>("NumberOfCitations")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_citations");

                    b.Property<int>("Publisherid")
                        .HasColumnType("integer")
                        .HasColumnName("publisherid");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("website_url");

                    b.HasKey("Magazineid");

                    b.HasIndex("Institutionid");

                    b.HasIndex("Publisherid");

                    b.HasIndex(new[] { "Isbn" }, "magazines_isbn_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "magazines_name_key")
                        .IsUnique();

                    b.ToTable("magazines", "core");
                });

            modelBuilder.Entity("Citations.Models.MagazineIssue", b =>
                {
                    b.Property<int>("Issueid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("issueid")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Issuenumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("issuenumber");

                    b.Property<int>("Magazineid")
                        .HasColumnType("integer")
                        .HasColumnName("magazineid");

                    b.HasKey("Issueid")
                        .HasName("magazine_issue_pkey");

                    b.HasIndex("Magazineid");

                    b.ToTable("magazine_issue", "core");
                });

            modelBuilder.Entity("Citations.Models.MagazineResearchField", b =>
                {
                    b.Property<int>("Magazineid")
                        .HasColumnType("integer")
                        .HasColumnName("magazineid");

                    b.Property<int>("Fieldid")
                        .HasColumnType("integer")
                        .HasColumnName("fieldid");

                    b.HasKey("Magazineid", "Fieldid")
                        .HasName("magazine_research_fields_pkey");

                    b.HasIndex("Fieldid");

                    b.ToTable("magazine_research_fields", "core");
                });

            modelBuilder.Entity("Citations.Models.PositionJob", b =>
                {
                    b.Property<int>("PositionJobid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("position_jobid")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("PositionJob1")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("position_job");

                    b.HasKey("PositionJobid");

                    b.ToTable("position_job", "core");
                });

            modelBuilder.Entity("Citations.Models.Publisher", b =>
                {
                    b.Property<int>("Publisherid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("publisherid")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("address");

                    b.Property<int>("Country")
                        .HasColumnType("integer")
                        .HasColumnName("country");

                    b.Property<int?>("Institutionid")
                        .HasColumnType("integer")
                        .HasColumnName("institutionid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<int?>("TypeOfPublisher")
                        .HasColumnType("integer")
                        .HasColumnName("type_of_publisher");

                    b.HasKey("Publisherid");

                    b.HasIndex("Country");

                    b.HasIndex("Institutionid");

                    b.HasIndex("TypeOfPublisher");

                    b.ToTable("publishers", "core");
                });

            modelBuilder.Entity("Citations.Models.ResearchField", b =>
                {
                    b.Property<int>("Fieldid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("fieldid")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name_en");

                    b.HasKey("Fieldid")
                        .HasName("research_fields_pkey");

                    b.ToTable("research_fields", "core");
                });

            modelBuilder.Entity("Citations.Models.TypeOfInstitution", b =>
                {
                    b.Property<int>("TypeInstitutionid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("type_institutionid")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("type_name");

                    b.HasKey("TypeInstitutionid")
                        .HasName("type_of_institution_pkey");

                    b.ToTable("type_of_institution", "core");
                });

            modelBuilder.Entity("Citations.Models.TypeOfPublisher", b =>
                {
                    b.Property<int>("TypePublisherid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("type_publisherid")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("type_name");

                    b.HasKey("TypePublisherid")
                        .HasName("type_of_publishers_pkey");

                    b.ToTable("type_of_publishers", "core");
                });

            modelBuilder.Entity("Citations.Models.TypeOfSource", b =>
                {
                    b.Property<int>("TypeSourceid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("type_sourceid")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("type_name");

                    b.HasKey("TypeSourceid")
                        .HasName("type_of_sources_pkey");

                    b.ToTable("type_of_sources", "core");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Citations.Models.Article", b =>
                {
                    b.HasOne("Citations.Models.IssueOfIssue", "ArticleIssueNavigation")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleIssue")
                        .HasConstraintName("articles_article_issue_fkey")
                        .IsRequired();

                    b.Navigation("ArticleIssueNavigation");
                });

            modelBuilder.Entity("Citations.Models.ArticleAuthore", b =>
                {
                    b.HasOne("Citations.Models.Article", "Article")
                        .WithMany("ArticleAuthores")
                        .HasForeignKey("Articleid")
                        .HasConstraintName("article_authores_articleid_fkey")
                        .IsRequired();

                    b.HasOne("Citations.Models.Author", "Author")
                        .WithMany("ArticleAuthores")
                        .HasForeignKey("Authorid")
                        .HasConstraintName("article_authores_authorid_fkey")
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Citations.Models.ArticleReference", b =>
                {
                    b.HasOne("Citations.Models.Article", "Article")
                        .WithMany("ArticleReferenceArticles")
                        .HasForeignKey("Articleid")
                        .HasConstraintName("article_references_articleid_fkey")
                        .IsRequired();

                    b.HasOne("Citations.Models.Article", "Articleref")
                        .WithMany("ArticleReferenceArticlerefs")
                        .HasForeignKey("Articlerefid")
                        .HasConstraintName("article_references_articlerefid_fkey");

                    b.HasOne("Citations.Models.Book", "Book")
                        .WithMany("ArticleReferences")
                        .HasForeignKey("Bookid")
                        .HasConstraintName("article_references_bookid_fkey");

                    b.HasOne("Citations.Models.ConferenceProceeding", "Conference")
                        .WithMany("ArticleReferences")
                        .HasForeignKey("Conferenceid")
                        .HasConstraintName("article_references_conferenceid_fkey");

                    b.HasOne("Citations.Models.TypeOfSource", "TypeSource")
                        .WithMany("ArticleReferences")
                        .HasForeignKey("TypeSourceid")
                        .HasConstraintName("article_references_type_sourceid_fkey");

                    b.Navigation("Article");

                    b.Navigation("Articleref");

                    b.Navigation("Book");

                    b.Navigation("Conference");

                    b.Navigation("TypeSource");
                });

            modelBuilder.Entity("Citations.Models.ArticlesKeyword", b =>
                {
                    b.HasOne("Citations.Models.Article", "Article")
                        .WithMany("ArticlesKeywords")
                        .HasForeignKey("Articleid")
                        .HasConstraintName("articles_keywords_articleid_fkey")
                        .IsRequired();

                    b.HasOne("Citations.Models.KeyWord", "KeyWord")
                        .WithMany("ArticlesKeywords")
                        .HasForeignKey("KeyWordid")
                        .HasConstraintName("articles_keywords_key_wordid_fkey")
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("KeyWord");
                });

            modelBuilder.Entity("Citations.Models.AuthorResearchField", b =>
                {
                    b.HasOne("Citations.Models.Author", "Author")
                        .WithMany("AuthorResearchFields")
                        .HasForeignKey("Authorid")
                        .HasConstraintName("author_research_fields_authorid_fkey")
                        .IsRequired();

                    b.HasOne("Citations.Models.ResearchField", "Field")
                        .WithMany("AuthorResearchFields")
                        .HasForeignKey("Fieldid")
                        .HasConstraintName("author_research_fields_fieldid_fkey")
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("Citations.Models.AuthorsPositionInstitution", b =>
                {
                    b.HasOne("Citations.Models.Author", "Author")
                        .WithMany("AuthorsPositionInstitutions")
                        .HasForeignKey("Authorid")
                        .HasConstraintName("authors_position_institution_authorid_fkey")
                        .IsRequired();

                    b.HasOne("Citations.Models.FacultyInstitutionDepartment", "FacultyInstitutionDepartment")
                        .WithMany("AuthorsPositionInstitutions")
                        .HasForeignKey("FacultyInstitutionDepartmentid")
                        .HasConstraintName("authors_position_institution_faculty_institution_departmen_fkey")
                        .IsRequired();

                    b.HasOne("Citations.Models.PositionJob", "PositionJob")
                        .WithMany("AuthorsPositionInstitutions")
                        .HasForeignKey("PositionJobid")
                        .HasConstraintName("authors_position_institution_position_jobid_fkey")
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("FacultyInstitutionDepartment");

                    b.Navigation("PositionJob");
                });

            modelBuilder.Entity("Citations.Models.Book", b =>
                {
                    b.HasOne("Citations.Models.Country", "CountryNavigation")
                        .WithMany("Books")
                        .HasForeignKey("Country")
                        .HasConstraintName("books_country_fkey");

                    b.HasOne("Citations.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("Publisherid")
                        .HasConstraintName("books_publisherid_fkey");

                    b.Navigation("CountryNavigation");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Citations.Models.BookAuthore", b =>
                {
                    b.HasOne("Citations.Models.Author", "Author")
                        .WithMany("BookAuthores")
                        .HasForeignKey("Authorid")
                        .HasConstraintName("book_authores_authorid_fkey")
                        .IsRequired();

                    b.HasOne("Citations.Models.Book", "Book")
                        .WithMany("BookAuthores")
                        .HasForeignKey("Bookid")
                        .HasConstraintName("book_authores_bookid_fkey")
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Citations.Models.ConferenceProceeding", b =>
                {
                    b.HasOne("Citations.Models.Country", "CountryNavigation")
                        .WithMany("ConferenceProceedings")
                        .HasForeignKey("Country")
                        .HasConstraintName("conference_proceedings_country_fkey");

                    b.HasOne("Citations.Models.Publisher", "Publisher")
                        .WithMany("ConferenceProceedings")
                        .HasForeignKey("Publisherid")
                        .HasConstraintName("conference_proceedings_publisherid_fkey");

                    b.Navigation("CountryNavigation");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Citations.Models.ConferenceProceedingsAuthor", b =>
                {
                    b.HasOne("Citations.Models.Author", "Author")
                        .WithMany("ConferenceProceedingsAuthors")
                        .HasForeignKey("Authorid")
                        .HasConstraintName("conference_proceedings_authors_authorid_fkey")
                        .IsRequired();

                    b.HasOne("Citations.Models.ConferenceProceeding", "Conference")
                        .WithMany("ConferenceProceedingsAuthors")
                        .HasForeignKey("Conferenceid")
                        .HasConstraintName("conference_proceedings_authors_conferenceid_fkey")
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("Citations.Models.FacultyInstitution", b =>
                {
                    b.HasOne("Citations.Models.Faculty", "Faculty")
                        .WithMany("FacultyInstitutions")
                        .HasForeignKey("Facultyid")
                        .HasConstraintName("faculty_institution_facultyid_fkey")
                        .IsRequired();

                    b.HasOne("Citations.Models.Institution", "Institution")
                        .WithMany("FacultyInstitutions")
                        .HasForeignKey("Institutionid")
                        .HasConstraintName("faculty_institution_institutionid_fkey")
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Citations.Models.FacultyInstitutionDepartment", b =>
                {
                    b.HasOne("Citations.Models.Department", "Department")
                        .WithMany("FacultyInstitutionDepartments")
                        .HasForeignKey("Departmentid")
                        .HasConstraintName("faculty_institution_department_departmentid_fkey")
                        .IsRequired();

                    b.HasOne("Citations.Models.FacultyInstitution", "FacultyInstitution")
                        .WithMany("FacultyInstitutionDepartments")
                        .HasForeignKey("FacultyInstitutionid")
                        .HasConstraintName("faculty_institution_department_faculty_institutionid_fkey")
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("FacultyInstitution");
                });

            modelBuilder.Entity("Citations.Models.Institution", b =>
                {
                    b.HasOne("Citations.Models.Country", "CountryNavigation")
                        .WithMany("Institutions")
                        .HasForeignKey("Country")
                        .HasConstraintName("institution_country_fkey")
                        .IsRequired();

                    b.HasOne("Citations.Models.TypeOfInstitution", "TypeOfInstitutionNavigation")
                        .WithMany("Institutions")
                        .HasForeignKey("TypeOfInstitution")
                        .HasConstraintName("institution_type_of_institution_fkey")
                        .IsRequired();

                    b.Navigation("CountryNavigation");

                    b.Navigation("TypeOfInstitutionNavigation");
                });

            modelBuilder.Entity("Citations.Models.IssueOfIssue", b =>
                {
                    b.HasOne("Citations.Models.MagazineIssue", "MagazineIssue")
                        .WithMany("IssueOfIssues")
                        .HasForeignKey("MagazineIssueId")
                        .HasConstraintName("issue_of_issue_magazine_issue_id_fkey")
                        .IsRequired();

                    b.Navigation("MagazineIssue");
                });

            modelBuilder.Entity("Citations.Models.Magazine", b =>
                {
                    b.HasOne("Citations.Models.Institution", "Institution")
                        .WithMany("Magazines")
                        .HasForeignKey("Institutionid")
                        .HasConstraintName("magazines_institutionid_fkey")
                        .IsRequired();

                    b.HasOne("Citations.Models.Publisher", "Publisher")
                        .WithMany("Magazines")
                        .HasForeignKey("Publisherid")
                        .HasConstraintName("magazines_publisherid_fkey")
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Citations.Models.MagazineIssue", b =>
                {
                    b.HasOne("Citations.Models.Magazine", "Magazine")
                        .WithMany("MagazineIssues")
                        .HasForeignKey("Magazineid")
                        .HasConstraintName("magazine_issue_magazineid_fkey")
                        .IsRequired();

                    b.Navigation("Magazine");
                });

            modelBuilder.Entity("Citations.Models.MagazineResearchField", b =>
                {
                    b.HasOne("Citations.Models.ResearchField", "Field")
                        .WithMany("MagazineResearchFields")
                        .HasForeignKey("Fieldid")
                        .HasConstraintName("magazine_research_fields_fieldid_fkey")
                        .IsRequired();

                    b.HasOne("Citations.Models.Magazine", "Magazine")
                        .WithMany("MagazineResearchFields")
                        .HasForeignKey("Magazineid")
                        .HasConstraintName("magazine_research_fields_magazineid_fkey")
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Magazine");
                });

            modelBuilder.Entity("Citations.Models.Publisher", b =>
                {
                    b.HasOne("Citations.Models.Country", "CountryNavigation")
                        .WithMany("Publishers")
                        .HasForeignKey("Country")
                        .HasConstraintName("publishers_country_fkey")
                        .IsRequired();

                    b.HasOne("Citations.Models.Institution", "Institution")
                        .WithMany("Publishers")
                        .HasForeignKey("Institutionid")
                        .HasConstraintName("publishers_institutionid_fkey");

                    b.HasOne("Citations.Models.TypeOfPublisher", "TypeOfPublisherNavigation")
                        .WithMany("Publishers")
                        .HasForeignKey("TypeOfPublisher")
                        .HasConstraintName("publishers_type_of_publisher_fkey");

                    b.Navigation("CountryNavigation");

                    b.Navigation("Institution");

                    b.Navigation("TypeOfPublisherNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Citations.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Citations.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Citations.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Citations.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Citations.Models.Article", b =>
                {
                    b.Navigation("ArticleAuthores");

                    b.Navigation("ArticleReferenceArticlerefs");

                    b.Navigation("ArticleReferenceArticles");

                    b.Navigation("ArticlesKeywords");
                });

            modelBuilder.Entity("Citations.Models.Author", b =>
                {
                    b.Navigation("ArticleAuthores");

                    b.Navigation("AuthorResearchFields");

                    b.Navigation("AuthorsPositionInstitutions");

                    b.Navigation("BookAuthores");

                    b.Navigation("ConferenceProceedingsAuthors");
                });

            modelBuilder.Entity("Citations.Models.Book", b =>
                {
                    b.Navigation("ArticleReferences");

                    b.Navigation("BookAuthores");
                });

            modelBuilder.Entity("Citations.Models.ConferenceProceeding", b =>
                {
                    b.Navigation("ArticleReferences");

                    b.Navigation("ConferenceProceedingsAuthors");
                });

            modelBuilder.Entity("Citations.Models.Country", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("ConferenceProceedings");

                    b.Navigation("Institutions");

                    b.Navigation("Publishers");
                });

            modelBuilder.Entity("Citations.Models.Department", b =>
                {
                    b.Navigation("FacultyInstitutionDepartments");
                });

            modelBuilder.Entity("Citations.Models.Faculty", b =>
                {
                    b.Navigation("FacultyInstitutions");
                });

            modelBuilder.Entity("Citations.Models.FacultyInstitution", b =>
                {
                    b.Navigation("FacultyInstitutionDepartments");
                });

            modelBuilder.Entity("Citations.Models.FacultyInstitutionDepartment", b =>
                {
                    b.Navigation("AuthorsPositionInstitutions");
                });

            modelBuilder.Entity("Citations.Models.Institution", b =>
                {
                    b.Navigation("FacultyInstitutions");

                    b.Navigation("Magazines");

                    b.Navigation("Publishers");
                });

            modelBuilder.Entity("Citations.Models.IssueOfIssue", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Citations.Models.KeyWord", b =>
                {
                    b.Navigation("ArticlesKeywords");
                });

            modelBuilder.Entity("Citations.Models.Magazine", b =>
                {
                    b.Navigation("MagazineIssues");

                    b.Navigation("MagazineResearchFields");
                });

            modelBuilder.Entity("Citations.Models.MagazineIssue", b =>
                {
                    b.Navigation("IssueOfIssues");
                });

            modelBuilder.Entity("Citations.Models.PositionJob", b =>
                {
                    b.Navigation("AuthorsPositionInstitutions");
                });

            modelBuilder.Entity("Citations.Models.Publisher", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("ConferenceProceedings");

                    b.Navigation("Magazines");
                });

            modelBuilder.Entity("Citations.Models.ResearchField", b =>
                {
                    b.Navigation("AuthorResearchFields");

                    b.Navigation("MagazineResearchFields");
                });

            modelBuilder.Entity("Citations.Models.TypeOfInstitution", b =>
                {
                    b.Navigation("Institutions");
                });

            modelBuilder.Entity("Citations.Models.TypeOfPublisher", b =>
                {
                    b.Navigation("Publishers");
                });

            modelBuilder.Entity("Citations.Models.TypeOfSource", b =>
                {
                    b.Navigation("ArticleReferences");
                });
#pragma warning restore 612, 618
        }
    }
}
